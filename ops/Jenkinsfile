pipeline {
  agent any

  environment {
    DOCKERHUB_USER = credentials('DOCKERHUB_USER')
    DOCKERHUB_PASS = credentials('DOCKERHUB_PASS')
    REPO = "hao1706/ballandbeer"
  }

  stages {
    stage('Clone source') {
      steps {
        checkout scm
      }
    }

    stage('Detect changed services') {
      steps {
        script {
          changedServices = sh(script: '''
            git diff --name-only HEAD~1 HEAD |
            grep -E '^services/|^frontend/' |
            cut -d/ -f2 |
            sort -u
          ''', returnStdout: true).trim().split('\n')

          if (changedServices.size() == 1 && changedServices[0].trim() == '') {
            echo "No changed service detected. Assuming first build. Building all services."
            changedServices = ['frontend', 'authen', 'booking', 'order', 'product', 'profile']
          }

          echo "Changed services: ${changedServices}"
        }
      }
    }

    stage('Build & Push') {
      steps {
        script {
          def servicePorts = [
            authen : 4000,
            booking: 4001,
            order  : 4002,
            product: 4003,
            profile: 4004
          ]

          withCredentials([file(credentialsId: 'ENV_TEMPLATE', variable: 'ENV_TEMPLATE')]) {
            for (svc in changedServices) {
              def path = (svc == 'frontend') ? 'frontend' : "services/${svc}"
              def image = "${REPO}:${svc}"

              echo "Building ${svc} from ${path}..."

              if (svc == 'frontend') {
                sh "cp $ENV_TEMPLATE ${path}/.env.local.build"
              } else if (servicePorts.containsKey(svc)) {
                def port = servicePorts[svc]
                sh """
                  cp $ENV_TEMPLATE ${path}/.env
                  sed -i 's/_PORT_/${port}/' ${path}/.env
                """
              }

              sh "docker build -t ${image} ${path}"

              if (svc == 'frontend') {
                sh "rm -f ${path}/.env.local.build"
              } else {
                sh "rm -f ${path}/.env"
              }

              echo "Pushing ${image} to Docker Hub..."
              sh '''
                echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
              '''
              sh "docker push ${image}"
            }
          }
        }
      }
    }
    stage('Deploying BallandBeer to EKS') {
      steps {
        script {
            sh 'aws eks update-kubeconfig --name EKS-Cluster-ballandbeer'
            sh 'kubectl get namespace ballandbeer || kubectl create namespace ballandbeer'
            def services = ['frontend', 'authen', 'booking', 'order', 'product', 'profile']
            for (svc in services) {
                sh "kubectl apply -f ops/k8s/${svc}/ -n ballandbeer"
            }
            sh 'kubectl apply -f ops/k8s/ingress.yaml -n ballandbeer'
        }
      }
    }
  }
}