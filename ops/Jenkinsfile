pipeline {
  agent any

  environment {
    DOCKERHUB_USER = credentials('DOCKERHUB_USER')
    DOCKERHUB_PASS = credentials('DOCKERHUB_PASS')
    REPO = "hao1706/ballandbeer"
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    AWS_DEFAULT_REGION = "us-east-1"
    SONARQUBE_SERVER = 'SonarQubeServer'
    SNYK_TOKEN = credentials('SNYK_TOKEN')
  }

  stages {

    stage('Checkout & Validate Paths') {
      steps {
        checkout scm
        script {
          def changedPaths = sh(script: '''
            git diff --name-only HEAD~1 HEAD
          ''', returnStdout: true).trim()

          def runPipeline = changedPaths.split('\n').any { path ->
            return path.startsWith("services/") || path.startsWith("frontend/")
          }

          if (!runPipeline) {
            currentBuild.result = 'NOT_BUILT'
            error("Stopped early: no relevant changes.")
            return
          }
        }
      }
    }

    stage('Detect changed services') {
      steps {
        script {
          changedServices = sh(script: '''
            git diff --name-only HEAD~1 HEAD |
            grep -E '^services/|^frontend/' |
            awk -F/ '/^frontend\\// { print "frontend" } /^services\\// { print $2 }' |
            sort -u
          ''', returnStdout: true).trim().split('\n')

          if (changedServices.size() == 1 && changedServices[0].trim() == '') {
            echo "No changed service detected. Assuming first build. Building all services."
            changedServices = ['frontend', 'authen', 'booking', 'order', 'product', 'profile', 'recommender']
          }

          def validServices = ['frontend', 'authen', 'booking', 'order', 'product', 'profile', 'recommender']
          changedServices = changedServices.findAll { svc -> validServices.contains(svc) }

          echo "Changed services: ${changedServices}"
        }
      }
    }

    stage('Static Analysis') {
      parallel {
        stage('SonarQube Analysis') {
          steps {
            script {
              for (svc in changedServices) {
                if (svc != 'frontend') {
                  def path = "services/${svc}"
                  withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    withEnv(["PATH+SCANNER=/opt/sonar-scanner/bin"]) {
                      sh """
                        sonar-scanner \
                          -Dsonar.projectKey=ballandbeer-${svc} \
                          -Dsonar.sources=${path} \
                          -Dsonar.host.url=$SONAR_HOST_URL \
                          -Dsonar.login=$SONAR_AUTH_TOKEN
                      """
                    }
                  }
                }
              }
            }
          }
        }

        stage('Pre-build Trivy Scan') {
          steps {
            script {
              for (svc in changedServices) {
                def path = (svc == 'frontend') ? 'frontend' : "services/${svc}"
                echo "Scanning source in ${path} with Trivy..."
                sh """
                  trivy fs --exit-code 0 --severity HIGH,CRITICAL ${path} || true
                """
              }
            }
          }
        }

        stage('Snyk Code Scan') {
          steps {
            script {
              sh "snyk auth $SNYK_TOKEN"
              for (svc in changedServices) {
                def path = (svc == 'frontend') ? 'frontend' : "services/${svc}"
                echo "Running Snyk code scan on ${path}..."
                sh """
                  cd ${path}
                  snyk test || true
                  snyk monitor || true
                """
              }
            }
          }
        }
      }
    }

    stage('Build & Push Images') {
      steps {
        script {
          def timestamp = sh(script: "date +%Y%m%d%H%M", returnStdout: true).trim()
          def servicePorts = [
            authen : 4000,
            booking: 4001,
            order  : 4002,
            product: 4003,
            profile: 4004,
            recommender: 4005
          ]

          withCredentials([file(credentialsId: 'ENV_TEMPLATE', variable: 'ENV_TEMPLATE')]) {
            for (svc in changedServices) {
              def path = (svc == 'frontend') ? 'frontend' : "services/${svc}"
              def imageTag = "${svc}-${timestamp}"
              def serviceRepo = "hao1706/${svc}"
              def imageWithTimestamp = "${serviceRepo}:${timestamp}"
              def imageLatest = "${serviceRepo}:latest"

              echo "Building ${svc} from ${path}..."

              if (svc == 'frontend') {
                sh """
                  rm -f ${path}/.env.local.build
                  install -m 644 \$ENV_TEMPLATE ${path}/.env.local.build
                """
              } else if (servicePorts.containsKey(svc)) {
                def port = servicePorts[svc]
                sh """
                  rm -f ${path}/.env
                  install -m 644 \$ENV_TEMPLATE ${path}/.env
                  sed -i 's/_PORT_/${port}/' ${path}/.env
                """
              }

              sh "docker build -t ${imageWithTimestamp} -t ${imageLatest} ${path}"

              if (svc == 'frontend') {
                sh "rm -f ${path}/.env.local.build"
              } else {
                sh "rm -f ${path}/.env"
              }

              echo "Pushing ${svc} images to Docker Hub..."
              sh '''
                echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
              '''
              sh "docker push ${imageWithTimestamp}"
              sh "docker push ${imageLatest}"

              sh "echo ${timestamp} > ${svc}_tag.txt"
            }
          }
        }
      }
    }

    stage('Post-build Security Scans') {
      parallel {
        stage('Trivy Image Scan') {
          steps {
            script {
              for (svc in changedServices) {
                def imageTag = readFile("${svc}_tag.txt").trim()
                def image = "${REPO}:${imageTag}"
                echo "Scanning image ${image} with Trivy..."
                sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${image} || true"
              }
            }
          }
        }

        stage('Snyk Image Scan') {
          steps {
            script {
              sh "snyk auth $SNYK_TOKEN"
              for (svc in changedServices) {
                def imageTag = readFile("${svc}_tag.txt").trim()
                def image = "${REPO}:${imageTag}"
                echo "Running Snyk container scan on ${image}..."
                sh """
                  snyk container test ${image} || true
                  snyk monitor || true
                """
              }
            }
          }
        }
      }
    }
  }
}
