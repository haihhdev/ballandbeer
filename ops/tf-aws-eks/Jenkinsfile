pipeline{
    agent any
    environment {
        // AWS Credentials
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "us-east-1"
        
        // EKS Configuration
        CLUSTER_NAME = "EKS-Cluster-ballandbeer"
        IAM_USER_NAME = "hhh_user"
        
        // Repository Configuration
        REPO_URL = "https://github.com/haihhdev/ballandbeer.git"
        BRANCH_NAME = "master"
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        
        // Terraform Configuration
        TERRAFORM_DIR = "ops/tf-aws-eks"
        TF_VARS_FILE = "variables/dev.tfvars"
        
        // Monitoring Configuration
        MONITORING_NAMESPACE = "monitoring"
        PROMETHEUS_PORT = "9090"
        GRAFANA_DASHBOARDS_DIR = "ops/monitoring/grafana/dashboards"
        GRAFANA_VALUES_FILE = "ops/monitoring/grafana/values.yaml"
    }
    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scmGit(branches: [[name: "*/${BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[url: "${REPO_URL}"]])
                }
            }
        }
        stage('Creating/Destroying EKS Cluster'){
            steps {
                script {
                    dir("${TERRAFORM_DIR}"){
                        sh 'terraform init'
                        sh 'terraform validate'
                        sh "terraform plan -var-file=${TF_VARS_FILE}"
                        sh "terraform $action -var-file=${TF_VARS_FILE} -auto-approve" 
                    }
                }
            }
        }
    
        stage('Add EKS IAM Access Entry') {
            steps {
                script {
                    sh """
                        ACCOUNT_ID=\$(aws sts get-caller-identity --query Account --output text)
                        PRINCIPAL_ARN="arn:aws:iam::\${ACCOUNT_ID}:user/${IAM_USER_NAME}"
                        CLUSTER_NAME=\$(terraform -chdir=${TERRAFORM_DIR} output -raw cluster_name)
                        
                        echo "Checking if access entry for \$PRINCIPAL_ARN exists..."
                        
                        EXISTS=\$(aws eks list-access-entries --cluster-name "\$CLUSTER_NAME" --output text | grep "\$PRINCIPAL_ARN" || true)
                        
                        if [ -n "\$EXISTS" ]; then
                            echo "Access entry for \$PRINCIPAL_ARN already exists. Skipping creation."
                        else
                            echo "Creating access entry for \$PRINCIPAL_ARN on \$CLUSTER_NAME..."
                        
                            aws eks create-access-entry \
                              --cluster-name "\$CLUSTER_NAME" \
                              --principal-arn "\$PRINCIPAL_ARN" \
                              --type STANDARD
                        
                            aws eks associate-access-policy \
                              --cluster-name "\$CLUSTER_NAME" \
                              --principal-arn "\$PRINCIPAL_ARN" \
                              --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy \
                              --access-scope type=cluster
                        fi
                    """
                }
            }
        }

        stage('Install Prometheus & Grafana') {
            steps {
                script {
                    sh """
                        aws eks update-kubeconfig --name ${CLUSTER_NAME}
                        kubectl create namespace ${MONITORING_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        if kubectl get configmap grafana-dashboards -n ${MONITORING_NAMESPACE} > /dev/null 2>&1; then
                            echo "Grafana dashboards ConfigMap already exists, skipping..."
                        else
                            kubectl create configmap grafana-dashboards \
                                --from-file=${GRAFANA_DASHBOARDS_DIR} \
                                -n ${MONITORING_NAMESPACE}
                        fi
                        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                        helm repo add grafana https://grafana.github.io/helm-charts || true
                        helm repo update
                        if helm list -n ${MONITORING_NAMESPACE} | grep -q prometheus; then
                            echo "Prometheus already installed. Upgrading..."
                        else
                            echo "Installing Prometheus..."
                        fi
                        helm upgrade --install prometheus prometheus-community/prometheus \
                            --namespace ${MONITORING_NAMESPACE} \
                            --set server.persistentVolume.enabled=false
                        if helm list -n ${MONITORING_NAMESPACE} | grep -q grafana; then
                            echo "Grafana already installed. Upgrading..."
                        else
                            echo "Installing Grafana..."
                        fi
                        helm upgrade --install grafana grafana/grafana \
                            --namespace ${MONITORING_NAMESPACE} \
                            -f ${GRAFANA_VALUES_FILE}
                        if lsof -i :${PROMETHEUS_PORT} | grep -q kubectl; then
                            echo "Port-forward to Prometheus is already running"
                        else
                            echo "Starting port-forward to Prometheus..."
                            nohup kubectl port-forward -n ${MONITORING_NAMESPACE} svc/prometheus-server ${PROMETHEUS_PORT}:80 > /dev/null 2>&1 &
                        fi
                    """
                }
            }
        }

        stage('Install ArgoCD') {
            steps {
                script {
                    sh '''
                        kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/ecr/?ref=release-1.30"
                        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
                        kubectl create namespace argocd || true
                        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}' || true
                        for i in {1..30}; do
                        kubectl get secret argocd-initial-admin-secret -n argocd >/dev/null 2>&1 && break
                        echo "Waiting for admin secret... ($i)"
                        sleep 5
                        done
                        
                        echo "Decoding ArgoCD admin password..."
                        ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                        echo "ArgoCD Admin Password: $ADMIN_PASSWORD"
                    '''
                }
            }
        }

        stage('Install Redpanda & Console') {
            steps {
                script {
                    sh """
                        aws eks update-kubeconfig --name ${CLUSTER_NAME}
                        kubectl create namespace redpanda --dry-run=client -o yaml | kubectl apply -f -
                        helm repo add redpanda https://charts.redpanda.com || true
                        helm repo update
                        helm upgrade --install redpanda redpanda/redpanda \
                            --namespace redpanda \
                            --set statefulset.replicas=1 \
                            --set console.enabled=true \
                            --set console.service.type=LoadBalancer \
                            --set tls.enabled=false \
                            --set 'console.config.kafka.adminApi.brokers[0]=http://redpanda.redpanda.svc.cluster.local:9644'
                    """
                }
            }
        }

        stage('Deploy ArgoCD Applications') {
            steps {
                script {
                    def apps = [
                        'authen',
                        'booking',
                        'order',
                        'product',
                        'profile',
                        'frontend',
                        'recommender',
                        'infra'
                    ]

                    for (svc in apps) {
                        def appFile = "ops/k8s/${svc}/overlays/dev/argocd-app.yaml"
                        echo "Applying ArgoCD app for: ${svc}"
                        try {
                            sh "kubectl apply -f ${appFile} -n argocd"
                            echo "Successfully deployed ${svc} application"
                        } catch (Exception e) {
                            echo "Failed to deploy ${svc} application: ${e.message}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Add GitHub Webhook') {
            steps {
                script {
                    def webhookUrl = "http://jenkins_url/github-webhook/"
                    sh """
                        curl -X POST \
                        -H "Authorization: token ${GITHUB_TOKEN}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/haihhdev/ballandbeer/hooks \
                        -d '{
                        "name": "web",
                        "active": true,
                        "events": ["push", "pull_request"],
                        "config": {
                            "url": "${webhookUrl}",
                            "content_type": "json",
                            "insecure_ssl": "0"
                        }
                        }'
                    """
                }
            }
        }

        stage('Show LoadBalancer URLs') {
            steps {
                script {
                    sh '''
                        kubectl apply -f ops/k8s/ingress.yaml -n ballandbeer

                        echo "\n==== Ingress NGINX LoadBalancer URL ===="
                        kubectl get svc ingress-nginx-controller -n ingress-nginx -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}'

                        echo "\n==== Grafana LoadBalancer URL ===="
                        kubectl get svc grafana -n monitoring -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}'

                        echo "\n==== Redpanda Console LoadBalancer URL ===="
                        kubectl get svc redpanda-console -n redpanda -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}'

                        echo "\n==== ArgoCD LoadBalancer URL ===="
                        kubectl get svc argocd-server -n argocd -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}'

                    '''
                }
            }
        }
    }
}